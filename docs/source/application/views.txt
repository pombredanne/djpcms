.. _views-index:

.. module:: djpcms.views

=================
View handlers
=================

As soon as a client requests a url, the primary job of ``djpcms`` is to find and invoke
a ``view handler``. These view handlers are instances of
:class:`djpcms.views.djpcmsview` the ``djpcms`` base class
for handling user requests.
Views are usually specified in a declarative manner when creating a
:class`djpcms.views.Application` class. A common pattern is
to create an application class containg several views which
are closely related to each other.

For example, the *Vannilla Application* implemented in
:mod:`djpcms.apps.included.vanilla` module specifies the
five most common views for a model::

    from djpcms import views

    class Application(views.ModelApplication):
        search = views.SearchView()
        add = views.AddView()
        view = views.ViewView()
        change = views.ChangeView()
        delete = views.DeleteView()

By default these views are served at::

    ../
    ../add/
    ../(?P<id>\d+)/
    ../(?P<id>\d+)/change/
    ../(?P<id>\d+)/delete/
    
    
Overview
=====================
If your web-site does not have any application, there is no need
for you to write any view handler since flat pages are always processed by
instances of the :class:`djpcms.views.pageview` class. 
On the other hand if you have dynamic application, the chances are you are going to
write some code.

As an example lets take the included application in :mod:`djpcms.apps.included.vanilla` ::

    from djpcms import views
    
    class Application(views.ModelApplication):
        search = views.SearchView()
        add    = views.AddView()
        view   = views.ViewView()
        edit   = views.ChangeView() 
   

API
===========

View Base Class
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.djpcmsview
   :members:
   :member-order: bysource
   
   
Flat Page View
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.pageview
   :members:
   :member-order: bysource


Application View
~~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.View
   :members:
   :member-order: bysource

Application Group View
~~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.GroupView
   :members:
   :member-order: bysource
   

Model Application Views
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Views associated with database models are handled by subclasses of
:class:`djpcms.views.View`.

.. autoclass:: djpcms.views.ModelView
   :members:
   :member-order: bysource
   
Search View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.SearchView
   :members:
   :member-order: bysource


Add View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.AddView
   :members:
   :member-order: bysource


Object View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.ObjectView
   :members:
   :member-order: bysource


View View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.ViewView
   :members:
   :member-order: bysource


Change View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.ChangeView
   :members:
   :member-order: bysource


Delete View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.DeleteView
   :members:
   :member-order: bysource


Autocomplete View
~~~~~~~~~~~~~~~~~~~~~~

.. autoclass:: djpcms.views.AutocompleteView
   :members:
   :member-order: bysource
   
.. admonition:: Rember the four points to have autocomplete out of the box:

    * When using the model in Forms, import from ``djpcms.forms`` and not ``django.forms``.
    * Your model application must have a ``search_fields`` list
    * Your model application must have the :class:`djpcms.views.AutocompleteView`.
    * Register your application as usual.