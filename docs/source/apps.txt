.. _applications-included:

.. module:: djpcms.apps

==========================
Included Applications
==========================

The :ref:`application framework <applications>` is flexible and powerful enough to handle most
uses one can think of.
To illustrate how it can be used and to provide common building blocks, djpcms
ships with few ``battery-included`` implementations which can be used out of the box.

These implementations are located in the :mod:`djpcms.apps` module.
Some of these implementations may depend on external libraries,
therefore, if you want to use them, all you need to do is to make sure
the dependencies are met. No settings involved.


Vanilla
======================

.. automodule:: djpcms.apps.vanilla

To use it::

    from djpcms.apps.vanilla import Application
    
    urls = (Application('/bla/',MyModel),...)


.. module:: djpcms.views.apps.archive


.. _included-admin:

Admin
===================

.. automodule:: djpcms.apps.admin
   

AdminSite
~~~~~~~~~~~~~~~~~

.. autoclass:: AdminSite
   :members:


AdminApplication
~~~~~~~~~~~~~~~~~

.. autoclass:: AdminApplication
   :members:   
   

make_admin_urls
~~~~~~~~~~~~~~~~~~~~

.. autoclass:: make_admin_urls
   :members:   

.. _included-archiveapplication:

Archive
======================

.. automodule:: djpcms.apps.archive
   :members:


.. _included-user:

User
============

.. automodule:: djpcms.apps.user
   :members:


.. _included-taggingapplication:   

.. _search:

Search Application
==========================

.. automodule:: djpcms.apps.search


Tagging
======================

.. automodule:: djpcms.apps.tagging
   :members:
   
The tagging application module contains three different applications which can be used
for different projects:


TagApplication
~~~~~~~~~~~~~~~~~~~~~
This is a :class:`djpcms.views.appsite.ModelApplication` which implements a tag view.


.. _tag-autocomplete:

TagsApplication
~~~~~~~~~~~~~~~~~~~~~
A :class:`djpcms.views.appsite.ModelApplication` used to handle :ref:`auto-complete <autocomplete>` tagging.
To use it, simply add the following three lines in your :setting:`APPLICATION_URL_MODULE`::

	from djpcms.views import appsite
	from djpcms.views.apps.tagging import Tag, TagsApplication
	
	appsite.site.register('/tagtools/', TagsApplication, model = Tag)
	

Then, when using tags in a form, use the following field::

	from djpcms.views.apps.tagging import TagField
	
	class myform(forms.Form):
	    tags = TagField()
		
and tag autocomplete is done.
	
	
   

.. _included-docapplication:

.. module:: djpcms.apps.docs

Sphinx Documentation
========================================

To create an application which display sphinx documentation::

	from djpcms.views.docview import DocApplication
	
	class MyProjectDocs(DocApplication):
	    name = 'myprojectdocs'
	
	
In order to display documentation you need to create a template directory.
In our example, ``djpcms`` will look into the following directories::

	['myprojectdocs/%s.html' % pagename,
	 'myprojectdocs/doc.html',
	 'docs/%s.html' % pagename,
	 'docs/doc.html']
	 
where ``pagename`` is the sphinx page name (*index*, *contents*, and so forth).
To get started quickly,
cut and past the entire ``docs`` directory in :file:`djpcms/templates/djpcms`.

.. autoclass:: djpcms.apps.docs.DocApplication
   :members:
   :member-order: bysource
   

.. _included-contentedit:

Inline Content Editing
==============================

.. automodule:: djpcms.apps.contentedit



