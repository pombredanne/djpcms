
.. _topics-application-intro:

============================
Dynamic Application Guide
============================

.. module:: djpcms.views.appsite

Dynamic applications are linked to a model in the database, and one model can have only one dynamic application associated with it.
Djpcms maintains a global object which contains a dictionary of all installed applications of your site.


The basics
==============================

Lets assume we have a model called `Project`, the basics step sto setup an application are the following:
    
    * A dynamic application is created by subclassing `ModelApplication` defined in djpcms.views.appsite.options::
        
        from djpcms.views.appsite import ModelApplication
        
        class ProjectApplication(ModelApplication):
            baseurl = '/project/'
    
    * The dynamic application class must specify the baseurl of the application (including trailing slashes).
    * A dynamic application is registered to the site by invoking::
        
        appsite.site.register(Project,ProjectApplication)
    

ModelApplication
======================

.. class:: appsite.ModelApplication

API reference
--------------------

Properties
~~~~~~~~~~~~~

.. class:: appsite.ModelApplication

    :class:`~appsite.ModelApplication` objects have the following properties:

    .. attribute:: ModelApplication.form

        Python class for a form used to add/edit an object, default: ``None``.
        
    .. attribute:: ModelApplication.model
    
        Model used in the application, it must be a model class. The model is not defined when subclassing :class:`~appsite.ModelApplication`, 
        instead is defined when registering the application with the site using::
        
            appsite.site.register(Project,ProjectApplication)
        
        


Methods
~~~~~~~~~~

.. class:: appsite.ModelApplication

    :class:`~appsite.ModelApplication` objects have the following methods:
    
    .. method:: ModelApplication.get_form(djp, prefix = None, initial = None, wrapped = True)

        Works in conjunction with the :attr:`~ModelApplication.form` property.
        
    .. method:: ModelApplication.get_object(*args, **kwargs)
    
        Return an instance of :attr:`~ModelApplication.model`. By default this method check for a model id in the
        dictionary `kwargs` and query the backend database on this id. This function should be reimplemented by subclasses to
        change this default behaviour.
       


